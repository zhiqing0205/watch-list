// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String?  @unique
  name      String
  password  String
  role      Role     @default(ADMIN)
  isActive  Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  operationLogs OperationLog[]
  movieReviews  MovieReview[]
  tvReviews     TvReview[]

  @@map("users")
}

model Movie {
  id              Int         @id @default(autoincrement())
  tmdbId          Int         @unique
  title           String
  originalTitle   String?
  overview        String?
  releaseDate     DateTime?
  runtime         Int?
  genres          String[]
  posterPath      String?
  backdropPath    String?
  posterUrl       String?
  backdropUrl     String?
  imdbId          String?
  doubanRating    Float?
  tmdbRating      Float?
  watchStatus     WatchStatus @default(UNWATCHED)
  summary         String?
  playUrl         String?
  isVisible       Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  cast        MovieCast[]
  reviews     MovieReview[]

  @@map("movies")
}

model TvShow {
  id              Int         @id @default(autoincrement())
  tmdbId          Int         @unique
  name            String
  originalName    String?
  overview        String?
  firstAirDate    DateTime?
  lastAirDate     DateTime?
  numberOfSeasons Int?
  numberOfEpisodes Int?
  genres          String[]
  posterPath      String?
  backdropPath    String?
  posterUrl       String?
  backdropUrl     String?
  imdbId          String?
  doubanRating    Float?
  tmdbRating      Float?
  watchStatus     WatchStatus @default(UNWATCHED)
  summary         String?
  playUrl         String?
  isVisible       Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  cast        TvCast[]
  reviews     TvReview[]

  @@map("tv_shows")
}

model Actor {
  id            Int      @id @default(autoincrement())
  tmdbId        Int      @unique
  name          String
  originalName  String?
  biography     String?
  birthday      DateTime?
  deathday      DateTime?
  gender        Int?
  profilePath   String?
  profileUrl    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  movieRoles MovieCast[]
  tvRoles    TvCast[]

  @@map("actors")
}

model MovieCast {
  id        Int @id @default(autoincrement())
  movieId   Int
  actorId   Int
  character String?
  order     Int?

  // Relations
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@unique([movieId, actorId])
  @@map("movie_cast")
}

model TvCast {
  id        Int @id @default(autoincrement())
  tvShowId  Int
  actorId   Int
  character String?
  order     Int?

  // Relations
  tvShow TvShow @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  actor  Actor  @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@unique([tvShowId, actorId])
  @@map("tv_cast")
}

model MovieReview {
  id        Int      @id @default(autoincrement())
  movieId   Int
  userId    Int
  rating    Float?
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([movieId, userId])
  @@map("movie_reviews")
}

model TvReview {
  id        Int      @id @default(autoincrement())
  tvShowId  Int
  userId    Int
  rating    Float?
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tvShow TvShow @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tvShowId, userId])
  @@map("tv_reviews")
}

model OperationLog {
  id          Int           @id @default(autoincrement())
  userId      Int
  operatorName String       // 操作员名称
  action      String
  entityType  EntityType
  resourceId  Int?          // 被操作资源的ID（仅作记录，不作外键）
  resourceName String?      // 被操作资源的名称（电影/电视剧标题等）
  resourceType String?      // 资源类型：MOVIE, TV_SHOW, ACTOR等
  description String?
  metadata    Json?         // 存储额外的操作相关数据
  createdAt   DateTime      @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("operation_logs")
}

enum Role {
  ADMIN
  USER
}

enum WatchStatus {
  UNWATCHED
  WATCHING
  WATCHED
  DROPPED
}

enum EntityType {
  MOVIE
  TV_SHOW
  ACTOR
  USER
  SYSTEM
}