#!/usr/bin/env node

/**
 * Êï∞ÊçÆÂ∫ìÂ§á‰ªΩËÑöÊú¨
 * ‰ΩøÁî®PrismaÂØºÂá∫Êï∞ÊçÆÔºåÁîüÊàêÂèØÊâßË°åÁöÑSQLÊèíÂÖ•ËØ≠Âè•
 */

const { PrismaClient } = require('@prisma/client');
const path = require('path');
const fs = require('fs');

const prisma = new PrismaClient();

// ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
const backupDir = path.join(__dirname, '..', 'backups');
if (!fs.existsSync(backupDir)) {
  fs.mkdirSync(backupDir, { recursive: true });
}

// ÁîüÊàêÂ§á‰ªΩÊñá‰ª∂ÂêçÔºàÂåÖÂê´Êó∂Èó¥Êà≥Ôºâ
const timestamp = new Date().toISOString()
  .replace(/:/g, '-')
  .replace(/\..+/, '')
  .replace('T', '_');

async function generateSQLBackup() {
  console.log('üîÑ ÂºÄÂßãÊï∞ÊçÆÂ∫ìÂ§á‰ªΩ...');
  
  try {
    // Ëé∑ÂèñÊâÄÊúâÊï∞ÊçÆ
    const [users, movies, tvShows, actors, movieCast, tvCast, movieReviews, tvReviews, operationLogs] = await Promise.all([
      prisma.user.findMany(),
      prisma.movie.findMany(),
      prisma.tvShow.findMany(),
      prisma.actor.findMany(),
      prisma.movieCast.findMany(),
      prisma.tvCast.findMany(),
      prisma.movieReview.findMany(),
      prisma.tvReview.findMany(),
      prisma.operationLog.findMany()
    ]);

    const backupFile = path.join(backupDir, `backup_${timestamp}.sql`);
    const jsonBackupFile = path.join(backupDir, `backup_${timestamp}.json`);

    // ÁîüÊàêSQLÂ§á‰ªΩ
    let sqlContent = '-- Database Backup Generated by Prisma\n';
    sqlContent += `-- Created: ${new Date().toISOString()}\n\n`;
    
    // Á¶ÅÁî®Â§ñÈîÆÊ£ÄÊü•
    sqlContent += 'SET session_replication_role = replica;\n\n';
    
    // Ê∏ÖÁ©∫Ë°®Êï∞ÊçÆ
    sqlContent += '-- Clear existing data\n';
    sqlContent += 'TRUNCATE TABLE "operation_logs", "tv_reviews", "movie_reviews", "tv_cast", "movie_cast", "actors", "tv_shows", "movies", "users" RESTART IDENTITY CASCADE;\n\n';

    // ÂáΩÊï∞ÔºöËΩ¨‰πâSQLÂ≠óÁ¨¶‰∏≤
    const escapeSQLString = (str) => {
      if (str === null || str === undefined) return 'NULL';
      return `'${str.toString().replace(/'/g, "''")}'`;
    };

    // ÂáΩÊï∞ÔºöÊ†ºÂºèÂåñÊó•Êúü
    const formatDate = (date) => {
      if (!date) return 'NULL';
      return `'${new Date(date).toISOString()}'`;
    };

    // ÂáΩÊï∞ÔºöÊ†ºÂºèÂåñÊï∞ÁªÑ
    const formatArray = (arr) => {
      if (!arr || arr.length === 0) return "'{}'";
      return `'{${arr.map(item => `"${item.replace(/"/g, '\\"')}"`).join(',')}}'`;
    };

    // ÊèíÂÖ•Users
    if (users.length > 0) {
      sqlContent += '-- Insert Users\n';
      users.forEach(user => {
        sqlContent += `INSERT INTO "users" ("id", "username", "email", "name", "password", "role", "isActive", "lastLoginAt", "createdAt", "updatedAt") VALUES (${user.id}, ${escapeSQLString(user.username)}, ${escapeSQLString(user.email)}, ${escapeSQLString(user.name)}, ${escapeSQLString(user.password)}, ${escapeSQLString(user.role)}, ${user.isActive}, ${formatDate(user.lastLoginAt)}, ${formatDate(user.createdAt)}, ${formatDate(user.updatedAt)});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•Movies
    if (movies.length > 0) {
      sqlContent += '-- Insert Movies\n';
      movies.forEach(movie => {
        sqlContent += `INSERT INTO "movies" ("id", "tmdbId", "title", "originalTitle", "overview", "releaseDate", "runtime", "genres", "posterPath", "backdropPath", "posterUrl", "backdropUrl", "imdbId", "doubanRating", "tmdbRating", "watchStatus", "summary", "playUrl", "isVisible", "createdAt", "updatedAt") VALUES (${movie.id}, ${movie.tmdbId}, ${escapeSQLString(movie.title)}, ${escapeSQLString(movie.originalTitle)}, ${escapeSQLString(movie.overview)}, ${formatDate(movie.releaseDate)}, ${movie.runtime || 'NULL'}, ${formatArray(movie.genres)}, ${escapeSQLString(movie.posterPath)}, ${escapeSQLString(movie.backdropPath)}, ${escapeSQLString(movie.posterUrl)}, ${escapeSQLString(movie.backdropUrl)}, ${escapeSQLString(movie.imdbId)}, ${movie.doubanRating || 'NULL'}, ${movie.tmdbRating || 'NULL'}, ${escapeSQLString(movie.watchStatus)}, ${escapeSQLString(movie.summary)}, ${escapeSQLString(movie.playUrl)}, ${movie.isVisible}, ${formatDate(movie.createdAt)}, ${formatDate(movie.updatedAt)});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•TV Shows
    if (tvShows.length > 0) {
      sqlContent += '-- Insert TV Shows\n';
      tvShows.forEach(tv => {
        sqlContent += `INSERT INTO "tv_shows" ("id", "tmdbId", "name", "originalName", "overview", "firstAirDate", "lastAirDate", "numberOfSeasons", "numberOfEpisodes", "genres", "posterPath", "backdropPath", "posterUrl", "backdropUrl", "imdbId", "doubanRating", "tmdbRating", "watchStatus", "summary", "playUrl", "isVisible", "createdAt", "updatedAt") VALUES (${tv.id}, ${tv.tmdbId}, ${escapeSQLString(tv.name)}, ${escapeSQLString(tv.originalName)}, ${escapeSQLString(tv.overview)}, ${formatDate(tv.firstAirDate)}, ${formatDate(tv.lastAirDate)}, ${tv.numberOfSeasons || 'NULL'}, ${tv.numberOfEpisodes || 'NULL'}, ${formatArray(tv.genres)}, ${escapeSQLString(tv.posterPath)}, ${escapeSQLString(tv.backdropPath)}, ${escapeSQLString(tv.posterUrl)}, ${escapeSQLString(tv.backdropUrl)}, ${escapeSQLString(tv.imdbId)}, ${tv.doubanRating || 'NULL'}, ${tv.tmdbRating || 'NULL'}, ${escapeSQLString(tv.watchStatus)}, ${escapeSQLString(tv.summary)}, ${escapeSQLString(tv.playUrl)}, ${tv.isVisible}, ${formatDate(tv.createdAt)}, ${formatDate(tv.updatedAt)});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•Actors
    if (actors.length > 0) {
      sqlContent += '-- Insert Actors\n';
      actors.forEach(actor => {
        sqlContent += `INSERT INTO "actors" ("id", "tmdbId", "name", "originalName", "biography", "birthday", "deathday", "gender", "profilePath", "profileUrl", "createdAt", "updatedAt") VALUES (${actor.id}, ${actor.tmdbId}, ${escapeSQLString(actor.name)}, ${escapeSQLString(actor.originalName)}, ${escapeSQLString(actor.biography)}, ${formatDate(actor.birthday)}, ${formatDate(actor.deathday)}, ${actor.gender || 'NULL'}, ${escapeSQLString(actor.profilePath)}, ${escapeSQLString(actor.profileUrl)}, ${formatDate(actor.createdAt)}, ${formatDate(actor.updatedAt)});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•Movie Cast
    if (movieCast.length > 0) {
      sqlContent += '-- Insert Movie Cast\n';
      movieCast.forEach(cast => {
        sqlContent += `INSERT INTO "movie_cast" ("id", "movieId", "actorId", "character", "order") VALUES (${cast.id}, ${cast.movieId}, ${cast.actorId}, ${escapeSQLString(cast.character)}, ${cast.order || 'NULL'});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•TV Cast
    if (tvCast.length > 0) {
      sqlContent += '-- Insert TV Cast\n';
      tvCast.forEach(cast => {
        sqlContent += `INSERT INTO "tv_cast" ("id", "tvShowId", "actorId", "character", "order") VALUES (${cast.id}, ${cast.tvShowId}, ${cast.actorId}, ${escapeSQLString(cast.character)}, ${cast.order || 'NULL'});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•Movie Reviews
    if (movieReviews.length > 0) {
      sqlContent += '-- Insert Movie Reviews\n';
      movieReviews.forEach(review => {
        sqlContent += `INSERT INTO "movie_reviews" ("id", "movieId", "userId", "rating", "review", "createdAt", "updatedAt") VALUES (${review.id}, ${review.movieId}, ${review.userId}, ${review.rating || 'NULL'}, ${escapeSQLString(review.review)}, ${formatDate(review.createdAt)}, ${formatDate(review.updatedAt)});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•TV Reviews
    if (tvReviews.length > 0) {
      sqlContent += '-- Insert TV Reviews\n';
      tvReviews.forEach(review => {
        sqlContent += `INSERT INTO "tv_reviews" ("id", "tvShowId", "userId", "rating", "review", "createdAt", "updatedAt") VALUES (${review.id}, ${review.tvShowId}, ${review.userId}, ${review.rating || 'NULL'}, ${escapeSQLString(review.review)}, ${formatDate(review.createdAt)}, ${formatDate(review.updatedAt)});\n`;
      });
      sqlContent += '\n';
    }

    // ÊèíÂÖ•Operation Logs
    if (operationLogs.length > 0) {
      sqlContent += '-- Insert Operation Logs\n';
      operationLogs.forEach(log => {
        sqlContent += `INSERT INTO "operation_logs" ("id", "userId", "action", "entityType", "entityId", "movieId", "tvShowId", "description", "createdAt") VALUES (${log.id}, ${log.userId}, ${escapeSQLString(log.action)}, ${escapeSQLString(log.entityType)}, ${log.entityId || 'NULL'}, ${log.movieId || 'NULL'}, ${log.tvShowId || 'NULL'}, ${escapeSQLString(log.description)}, ${formatDate(log.createdAt)});\n`;
      });
      sqlContent += '\n';
    }

    // Êõ¥Êñ∞Â∫èÂàó
    sqlContent += '-- Update sequences\n';
    sqlContent += `SELECT setval('"users_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "users"));\n`;
    sqlContent += `SELECT setval('"movies_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "movies"));\n`;
    sqlContent += `SELECT setval('"tv_shows_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "tv_shows"));\n`;
    sqlContent += `SELECT setval('"actors_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "actors"));\n`;
    sqlContent += `SELECT setval('"movie_cast_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "movie_cast"));\n`;
    sqlContent += `SELECT setval('"tv_cast_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "tv_cast"));\n`;
    sqlContent += `SELECT setval('"movie_reviews_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "movie_reviews"));\n`;
    sqlContent += `SELECT setval('"tv_reviews_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "tv_reviews"));\n`;
    sqlContent += `SELECT setval('"operation_logs_id_seq"', (SELECT COALESCE(MAX("id"), 1) FROM "operation_logs"));\n\n`;

    // ÊÅ¢Â§çÂ§ñÈîÆÊ£ÄÊü•
    sqlContent += 'SET session_replication_role = DEFAULT;\n';

    // ÂÜôÂÖ•SQLÊñá‰ª∂
    fs.writeFileSync(backupFile, sqlContent);

    // ÂÜôÂÖ•JSONÂ§á‰ªΩ
    const jsonData = {
      users, movies, tvShows, actors, movieCast, tvCast, movieReviews, tvReviews, operationLogs
    };
    fs.writeFileSync(jsonBackupFile, JSON.stringify(jsonData, null, 2));

    const stats = fs.statSync(backupFile);
    const fileSizeInKB = (stats.size / 1024).toFixed(2);

    console.log('‚úÖ Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÂÆåÊàê!');
    console.log(`üìÅ SQLÂ§á‰ªΩÊñá‰ª∂: ${backupFile}`);
    console.log(`üìÅ JSONÂ§á‰ªΩÊñá‰ª∂: ${jsonBackupFile}`);
    console.log(`üìä SQLÊñá‰ª∂Â§ßÂ∞è: ${fileSizeInKB} KB`);
    
    // Êï∞ÊçÆÁªüËÆ°
    console.log('\nüìà Â§á‰ªΩÊï∞ÊçÆÁªüËÆ°:');
    console.log(`  Áî®Êà∑: ${users.length} Êù°`);
    console.log(`  ÁîµÂΩ±: ${movies.length} Êù°`);
    console.log(`  ÁîµËßÜÂâß: ${tvShows.length} Êù°`);
    console.log(`  ÊºîÂëò: ${actors.length} Êù°`);
    console.log(`  ÁîµÂΩ±ÊºîÂëò: ${movieCast.length} Êù°`);
    console.log(`  ÁîµËßÜÂâßÊºîÂëò: ${tvCast.length} Êù°`);
    console.log(`  ÁîµÂΩ±ËØÑËÆ∫: ${movieReviews.length} Êù°`);
    console.log(`  ÁîµËßÜÂâßËØÑËÆ∫: ${tvReviews.length} Êù°`);
    console.log(`  Êìç‰ΩúÊó•Âøó: ${operationLogs.length} Êù°`);

    return backupFile;

  } catch (error) {
    console.error('‚ùå Â§á‰ªΩÂ§±Ë¥•:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ÊâßË°åÂ§á‰ªΩ
generateSQLBackup().catch(console.error);